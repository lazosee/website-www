---
import type { Category } from "@/db/schema";
import { getAllCategories, getAllPosts, getPostsByCategory } from "@/db/select";
import type { PostPreview } from "@/db/types";
import { MainLayout } from "@/layouts";
import { format } from "@/utils/date";
import { titleTemplate } from "@/utils/functions";
import { blog_url } from "@/utils/urls";
import { calcReadingTime } from "@lueur/blog-utils";
import { getCollection } from "astro:content";

const { searchParams, port } = new URL(Astro.request.url);
const category = searchParams.get('category')

// const categories: Category[] = await getAllCategories()
// const allPosts: PostPreview[] =  await (async () => {
// 	if (category) {
// 		return (await getPostsByCategory(category))
// 	} else {
// 		return (await getAllPosts());
// 	}
// })()

const categories = await getCollection('categories');
const posts = await (async () => {
	if (!category) return await getCollection('posts')

	return (await getCollection('posts')).filter((post) => post.data.category === category)
})()

console.dir({ posts, categories }, { depth: Infinity })
---
<MainLayout title={titleTemplate('The Library')}>
	<main class="w-full h-full">
		{/* 1. The Content Display */}
		<section class="flex flex-col items-center justify-center w-full h-fit aspect-auto border-b-2">
			<h2 class="block leading-1 mb-0 w-full max-w-3xl px-0 pr-4 pt-8 sm:px-6 sm:pl-0 sm:py-12 capitalize">
				Blog Posts
			</h2>
			<p class="block w-full max-w-3xl my-12 mt-0 font-light">
				Explore a collection of all my posts sorted by category, date, and popularity
			</p>
			<div id="posts" class="grid w-full place-items-center">
				<header class="flex max-w-3xl w-full font-lora justify-between items-center content-center justify-items-center border-b-2 border-slate-400 dark:border-slate-400 p-0">
					<ul class="hidden sm:flex max-w-3xl w-full p-0 list-none gap-2">
						<li class:list={[ 'p-2', { ' bg-slate-700/40 border-b-2 border-slate-400 dark:border-slate-400': !category } ]}>
							<h3 class="text-lg font-inter font-light">
								<a href="/posts/">All</a>
							</h3>
						</li>
						{ categories && categories.map((c, i) => (
							<li class:list={[ 'p-2', { ' bg-slate-700/40 border-b-2 border-slate-400 dark:border-slate-400': category == c.data.slug } ]}>
								<h3 class="text-lg font-inter font-light">
									<a href={`/posts/${c.data.slug}`}>{c.data.title}</a>
								</h3>
							</li>
						)) }
					</ul>
					<div class="w-auto max-w-sm min-w-[200px]">				
						<div class="relative">
							<select
								name="sort-by" id="sort-by"
								class="w-full bg-transparent placeholder:text-slate-400 text-slate-700 dark:text-white text-lg border border-slate-200 rounded pl-3 pr-8 py-2 transition duration-300 ease focus:outline-none focus:border-slate-400 hover:border-slate-400 shadow-sm focus:shadow-md appearance-none cursor-pointer">
								<option class="bg-slate-300 dark:bg-slate-900 border-2" value="latest">Latest</option>
								<option class="bg-slate-300 dark:bg-slate-900 border-2" value="popular">Popular</option>
								<option class="bg-slate-300 dark:bg-slate-900 border-2" value="oldest">Oldest</option>
							</select>
							<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.2" stroke="currentColor" class="h-5 w-5 ml-1 absolute top-2.5 right-2.5 text-slate-700 dark:text-slate-100">
								<path stroke-linecap="round" stroke-linejoin="round" d="M8.25 15 12 18.75 15.75 15m-7.5-6L12 5.25 15.75 9" />
							</svg>
						</div>
					</div>
				</header>
					{/* <hr> */}
				<main id="article-container" class="block items-center justify-center justify-items-center content-center p-2">
					{posts && posts.length > 0 ? posts.map((p, i) => (
						<article id={` bgpost-${i}-${p.slug}`} data-views={Math.floor(Math.random() * i * 100)} data-date={p.data.published_at.getTime()} class="article-item block content-center justify-items-center mx-2 my-4 px-2 py-4 max-w-3xl w-full items-center justify-center bg-current/5 rounded-lg">
							<div class="block p-2 h-inherit">
								<h4 class="font-lora text-slate-800 dark:text-slate-100 text-2xl! mb-4 -pl-1 hover:underline focus-visible:underline underline-offset-2">
									<a href={blog_url(p.slug, p.data.published_at)}>
										{p.data.title}
									</a>
								</h4>
								<p class="text-md pl-2 text-slate-700 dark:text-slate-100">{p.data.snippet}</p>
							</div>
							<div class="flex w-full mx-1 my-2 p-2 py-2 justify-between items-center-safe text-sm font-lora font-semibold text-slate-700 dark:text-slate-100">
								<time datetime={p.data.published_at.toISOString()} class="px-2">
									{format(p.data.published_at)}
								</time>
								<span class="px-2">
									{calcReadingTime(p.body)} min read
								</span>
							</div>
						</article>
					)) : (
						<p class="m-4 p-4 shadow-2xl text-xl font-extralight">
							No posts for category: <em class="text-2xl">{category}</em>
						</p>
					)}
				</main>
				<pre>
					{/* {JSON.stringify(posts[0], null, 2)} */}
				</pre>
			</div>
		</section>
	</main>
</MainLayout>

<script>
	import { sortAndReplaceElements, type SortBy } from "@/utils/dom";
	
	const sort_by = document.querySelector('#sort-by') as HTMLSelectElement;
	
	window.onload = function() {
		sortAndReplaceElements('article-container', '.article-item', 'latest')
	}
	
	sort_by.addEventListener('change', function () {
		sortAndReplaceElements('article-container', '.article-item', this.value as SortBy)
	})
</script>
